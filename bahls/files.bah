isMainFile(f cpstring, l int) bool {
    toks = lexer(f, l)
    i=0; for i < len(toks), i++ {
        if toks[i].type == TOKEN_TYPE_VAR && toks[i].ogCont == "main" && i+1 < len(toks) && toks[i+1].ogCont == "(" {
            currLine = toks[i].line
            for i < len(toks), i++ {
                if toks[i].line != currLine {
                    if toks[i-1].ogCont == "}" {
                        return true
                    }
                }
            }
            return true
        }
    }
    return false
}

pdps = []PublishDiagnosticsParams

validateMainFile() {
    logMsg("validating main file: "+mainFile)
    mkdir(".tmp_bah", 0777)
    command("bah "+currentDir+"/"+mainFile+" -debug > .tmp_bah/out.json").runBytes()

    fs = fileStream{}
    fs.open(".tmp_bah/out.json", "r")
    r = fs.readContent()
    fs.close()
    removeFile(".tmp_bah/out.json")

    j = parseJson(r)

    clear(variables)
    clear(funcs)
    clear(strcts)

    k=0; for k < len(pdps), k++ {
        clear(pdps[k].diagnostics)
    }

    i=0; for i < len(j.children), i++ {
        e = j.children[i]
        name = e.get("name").str()

        if name == "file_end" || name == "error_end" {
            break
        }

        path = e.get("path").str()

        if name == "error" || name == "warning" || name == "notice" {
            efile = splitStringBefore(string(path), ":")
            eline = strToInt(path[strlen(efile)+1:])
            
            pdp = PublishDiagnosticsParams{}

            uri = "file://"+efile

            k=0; for k < len(pdps), k++ {
                if pdps[k].uri == uri {
                    pdp = pdps[k]
                    break
                }
            }

            if k == len(pdps) {
                pdp = PublishDiagnosticsParams {
                    uri: uri
                }
                pdps[len(pdps)] = pdp
            }

            diag = Diagnostic {
                message: e.get("element").str()
                source: "bah"
            }

            if name == "error" {
                diag.severity = DiagnosticSeverityError
            } else if name == "warning" {
                diag.severity = DiagnosticSeverityWarning
            } else if name == "notice" {
                diag.severity = DiagnosticSeverityInformation
            }

            ej = parseJson(e.get("range").str())


            diag.range.start = Position {
                line: eline-1
                character: strToInt(ej.children[0].str()) - 1
            }

            diag.range.end = Position {
                line: eline-1
                character: strToInt(ej.children[1].str()) - 1
            }
            diag.range.validate()

            pdp.diagnostics[len(pdp.diagnostics)] = diag
            continue
        }
        
        ej = parseJson(e.get("element").str())
        if name == "fn_declare" {
            fn = new func
            ej.scan(fn)
            fn.path = path
            funcs[len(funcs)] = fn
        } else if name == "struct_declare" {
            s = new strct
            ej.scan(s)
            s.path = path
            strcts[len(strcts)] = s
        } else if name == "var_declaration" {
            v = new variable
            ej.scan(v)
            v.path = path
            variables[len(variables)] = v
        } else if name == "var_end" {
            efile = splitStringBefore(string(path), ":")
            eline = strToInt(path[strlen(efile)+1:])
            name = ej.str()
            k=len(variables)-1; for k > 0, k-- {
                v = variables[k]
                file = splitStringBefore(string(v.path), ":")
                line = strToInt(v.path[strlen(file)+1:])
                if v.name == name && efile == file && eline >= line {
                    v.end = eline
                    break
                }
            }
        }
    }

    i=0; for i < len(pdps), i++ {
        sendDiagnostic(&pdps[i])
    }

}

compileDebug() {
    command("bah .tmp_bah/debug.bah").runBytes()
    removeFile(".tmp_bah/debug.bah")
    fs = fileStream{}
    if fileExists(".vscode/launch.json") == false {
        mkdir(".vscode", 0777)
        fs.open("./.vscode/launch.json", "w")
        fs.writeFile("//This launch.json file is made to work with extensions such as 'cdt-gdb-vscode'
//It was generated automatically by the Bah extension.
{
    \"version\": \"0.2.0\",
    \"configurations\": [
        {
            \"type\": \"gdb\",
            \"request\": \"launch\",
            \"name\": \"GDB (bah) launch\",
            \"initCommands\": [\"handle SIGSEGV nostop\"],
            \"program\": \"${workspaceFolder}/.tmp_bah/debug\"
        }
    ]
}
")
        fs.close()
    }
}

validateFiles(dir cpstring) bool {    
    logMsg("validating: "+dir)
    removeFile(".tmp_bah/debug")
    files = listFiles(dir)
    fs = fileStream{}

    folders = []cpstring

    i=0; for i < len(files), i++ {
        if isFolder(dir+"/"+files[i]) && files[i][0] != '.' {
            folders[len(folders)] = files[i]
            continue
        }
        if string(files[i]).hasSuffix(".bah") {
            fs.open(dir+"/"+files[i], "r")
            f = fs.readContent()
            l = fs.getSize()
            fs.close()
            if isMainFile(f, l) {
                mainFile = files[i]
                currentDir = dir
                validateMainFile()

                fs = fileStream{}
                fs.open(".tmp_bah/debug.bah", "w")
                fs.writeFile("#cLib \"g\"\n#include \"../"+mainFile+"\"")
                fs.close()
                async compileDebug()
                

                return true
            }
        }
    }

    i=0; for i < len(folders), i++ {
        if validateFiles(dir+"/"+folders[i]) {
            return true
        }
    }

    return false
}