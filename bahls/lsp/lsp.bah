struct request {
    body: jsonElement*
}

getCharSafe() char {
    c = getchar()
    if c == <char>-1 {
        exit(0)
    }
    return c
}

getRequest() request* {
    req = new request

    for 1==1 {
        if isSpace(getCharSafe()) == false {
            break
        }
    }

    i=0; for i < 15, i++ {
        c = getCharSafe()
        if c == ' ' {
            break
        }
    }

    c = null
    buff = []char
    for c != <char>10 {
        c = getCharSafe()
        buff[len(buff)] = c
    }
    
    getCharSafe()
    getCharSafe()

    nb = strToInt(arrToStr(buff))

    clear(buff)

    i=0; for i < nb, i++ {
        buff[i] = getCharSafe()
    }

    s = arrToStr(buff)
    
    logMsg("-> '"+s)

    req.body = parseJson(s)
    return req
}

idCount = 0

sendResponse(params reflectElement, id int) {
    s = string("{\"id\":"+intToStr(id)+",\"result\":"+toJson(params)+"}\r\n")
    print("Content-Length: "+intToStr(s.length)+"\r\n\r\n")
    print(s.str())
    logMsg("<- '"+s.str())
    idCount = id + 1
}

sendRequest(method cpstring, params reflectElement, id int) {
    s = string("{\"jsonrpc\":\"2.0\",\"method\":\""+method+"\",\"params\":"+toJson(params)+"}\r\n")
    print("Content-Length: "+intToStr(s.length)+"\r\n\r\n")
    print(s.str())
    logMsg("<- '"+s.str())
    idCount = id + 1
}

markdownPath(s cpstring) cpstring {
    file = splitStringBefore(string(s), ":")
    line = strToInt(s[strlen(file)+1:])

    return file+"#L"+intToStr(line)
}

#include "diagnostics.bah"
#include "completion.bah"
#include "hover.bah"
#include "initialize.bah"